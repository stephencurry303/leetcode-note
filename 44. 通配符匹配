class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        #动态规划
        m=len(s)
        n=len(p)
        #[m,n]大小的二维数组，里面的默认值皆为False
        dp = [[bool(0) for i in range(n+1)] for j in range(m+1)]
        #更改0行0列的为True
        dp[0][0] = bool(1)
        # 开始初始化填充,如果匹配的串s是空的的话，只有模式是*才能匹配
        #n是字符模式的长度
        for i in range(n):
            if dp[0][i] and p[i] == '*':
                dp[0][i + 1] = bool(1)

        ## 开始动态规划
        for i in range(m):
            for j in range(n):
                if p[j] == '*':
                    dp[i + 1][j + 1] = dp[i][j+1] or dp[i+1][j]
                elif p[j] == '?' or s[i] == p[j]:
                    dp[i+1][j + 1] = dp[i][j]
        return dp[m][n]
