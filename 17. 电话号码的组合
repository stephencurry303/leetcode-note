class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        """
        动态规划
        dp[i]: 前i个字母的所有组合
        由于dp[i]只与dp[i-1]有关,可以使用变量代替列表存储降低空间复杂度
        :type digits: str
        :rtype: List[str]
        """
        #如果digits为空，返回空
        if not digits:
            return []
        #建立z字典，把2到9里对应的字母搞出来
        d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
             '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        #求字符串的长度
        n = len(digits)
        #建了n个空列表
        dp = [[] for _ in range(n)]
        #第一个空列表等于第一个字符所对应的字母
        dp[0] = [x for x in d[digits[0]]]
        #从1 遍历到n
        for i in range(1, n):
            #第i个列表等于前一个列表的字母加上当前列表的字母
            dp[i] = [x + y for x in dp[i - 1] for y in d[digits[i]]]
        return dp[-1]

    # def letterCombinations2(self, digits):
    #     """
    #     使用变量代替上面的列表
    #     降低空间复杂度
    #     :type digits: str
    #     :rtype: List[str]
    #     """
          #如果字符串为空，返回空
    #     if not digits:
    #         return []
          #初始化字典
    #     d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
    #          '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
          #字符串长度
    #     n = len(digits)
          #列表里有个k空字符
    #     res = ['']
          #
    #     for i in range(n):
    #         res = [x + y for x in res for y in d[digits[i]]]
    #     return res

    # def letterCombinations3(self, digits):
    #     """
    #     递归
    #     :param digits:
    #     :return:
    #     """
          #字典
    #     d = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
    #          '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
          #空字符串，返回空
    #     if not digits:
    #         return []
          #长度为1的话，就返回它们里面的字母
    #     if len(digits) == 1:
    #         return [x for x in d[digits[0]]]
          
    #     return [x + y for x in d[digits[0]] for y in self.letterCombinations3(digits[1:])]
